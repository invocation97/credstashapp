datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Authenticators Authenticator[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    role           Role            @relation(fields: [roleId], references: [id])
    roleId         String          @default("bd94783b-cbdc-48ab-a730-ff1e28946468")

    // Organization the user is a member of (One-to-Many)
    organization   Organization? @relation("UserToOrganization", fields: [organizationId], references: [id])
    organizationId String?

    // Organizations the user owns (One-to-Many)
    ownedOrganizations Organization[] @relation("UserToOwnedOrganizations")

    didFinishOnboarding Boolean  @default(false)
    createdFolders      Folder[] @relation("CreatedByRelation")
    editedFolders       Folder[] @relation("EditedByRelation")
    createdPages        Page[]   @relation("PageCreatedByRelation")
    editedPages         Page[]   @relation("PageEditedByRelation")
}

model Role {
    id    String @id @default(cuid())
    name  String @unique
    users User[]
}

model Organization {
    id        String   @id @default(cuid())
    name      String   @unique
    ownerId   String
    owner     User     @relation("UserToOwnedOrganizations", fields: [ownerId], references: [id])
    users     User[]   @relation("UserToOrganization")
    folders   Folder[]
    pages     Page[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Invite Invite[]
}

model Folder {
    id             String       @id @default(cuid())
    name           String
    handle         String
    isRoot         Boolean      @default(false)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now())
    createdBy      User         @relation("CreatedByRelation", fields: [createdById], references: [id])
    createdById    String
    editedBy       User         @relation("EditedByRelation", fields: [editedById], references: [id])
    editedById     String
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    parentId       String?
    parent         Folder?      @relation("FolderParent", fields: [parentId], references: [id])
    children       Folder[]     @relation("FolderParent")
    pages          Page[]

    @@unique([name, organizationId, parentId])
    @@unique([handle, organizationId, parentId])
}

model Page {
    id             String        @id @default(cuid())
    name           String
    handle         String
    content        String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    createdBy      User          @relation("PageCreatedByRelation", fields: [createdById], references: [id])
    createdById    String
    editedBy       User          @relation("PageEditedByRelation", fields: [editedById], references: [id])
    editedById     String
    folder         Folder        @relation(fields: [folderId], references: [id])
    folderId       String
    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?

    @@unique([name, organizationId, folderId])
    @@unique([handle, organizationId, folderId])
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Invite {
    id             String       @id @default(cuid())
    email          String
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    status         String       @default("pending") // possible values: pending, accepted, rejected
    token          String       @unique
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
